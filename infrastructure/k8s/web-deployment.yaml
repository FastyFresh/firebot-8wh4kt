apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-bot-web
  namespace: trading-bot-prod
  labels:
    app: trading-bot
    component: web
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: trading-bot
      component: web
  template:
    metadata:
      labels:
        app: trading-bot
        component: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        security.alpha.kubernetes.io/pod-security-policy: "restricted"
        container.apparmor.security.beta.kubernetes.io/trading-bot-web: "runtime/default"
        checksum/config: ${CONFIG_CHECKSUM}
    spec:
      containers:
      - name: trading-bot-web
        image: trading-bot/web:${VERSION}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: API_URL
          value: "http://trading-bot-backend:8000"
        - name: WS_URL
          value: "ws://trading-bot-backend:8000/ws"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: JWT_SECRET_KEY
        - name: CDN_URL
          value: "https://cdn.trading-bot.com"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
          readOnly: false
        - name: cache
          mountPath: /app/cache
          readOnly: false
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: trading-bot
                  component: web
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: Exists
      networkPolicy:
        ingress:
        - from:
          - namespaceSelector:
              matchLabels:
                name: trading-bot-prod
          - podSelector:
              matchLabels:
                app: trading-bot
                component: ingress-controller
          ports:
          - protocol: TCP
            port: 3000
        egress:
        - to:
          - podSelector:
              matchLabels:
                app: trading-bot
                component: backend
          ports:
          - protocol: TCP
            port: 8000