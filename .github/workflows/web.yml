name: Web Dashboard CI/CD

on:
  push:
    branches: [main]
    paths: ['src/web/**']
  pull_request:
    branches: [main]
    paths: ['src/web/**']

permissions:
  contents: read
  id-token: write
  security-events: write
  packages: write

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: trading-bot-web
  ECS_CLUSTER: trading-bot-cluster
  ECS_SERVICE: web-service
  CANARY_PERCENTAGE: 10
  HEALTH_CHECK_RETRIES: 5
  ROLLBACK_THRESHOLD: 50
  NODE_VERSION: '18.x'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Dependency Review
        uses: actions/dependency-review-action@v3

      - name: NPM Audit
        run: |
          cd src/web
          npm audit --production --audit-level=high

  test:
    name: Test and Build
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package.json

      - name: Install dependencies
        run: |
          cd src/web
          npm ci

      - name: Run ESLint
        run: |
          cd src/web
          npm run lint

      - name: Type checking
        run: |
          cd src/web
          npm run typecheck

      - name: Run tests
        run: |
          cd src/web
          npm run test:coverage
        env:
          CI: true

      - name: Analyze bundle
        run: |
          cd src/web
          npm run analyze

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            src/web/coverage
            src/web/stats.html

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          file: ./src/web/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_WS_URL=${{ secrets.VITE_WS_URL }}

      - name: Scan container image
        uses: snyk/actions/docker@v1
        with:
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Deploy to ECS (Canary)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --deployment-configuration "deploymentCircuitBreaker={enable=true,rollback=true},trafficRouting={type=BLUE_GREEN,timeBasedCanary={stepPercentage=${{ env.CANARY_PERCENTAGE }},bakeTimeMins=5}}" \
            --task-definition $(aws ecs describe-task-definition \
              --task-definition ${{ env.ECS_SERVICE }} \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

      - name: Monitor deployment health
        run: |
          attempts=0
          while [ $attempts -lt ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            health_status=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].deployments[0].rolloutState' \
              --output text)
            
            if [ "$health_status" = "COMPLETED" ]; then
              echo "Deployment successful!"
              exit 0
            elif [ "$health_status" = "FAILED" ]; then
              echo "Deployment failed, initiating rollback..."
              exit 1
            fi
            
            attempts=$((attempts + 1))
            sleep 30
          done
          echo "Deployment health check timeout exceeded"
          exit 1

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { job, conclusion } = context;
            const status = conclusion === 'success' ? '✅' : '❌';
            const message = `Deployment ${conclusion}: ${status}\nEnvironment: production\nCommit: ${context.sha}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });