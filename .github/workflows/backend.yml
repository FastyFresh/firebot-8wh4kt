name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/**'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily security scans

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PYTHONPATH: src/backend
  CARGO_NET_RETRY: 2
  RUSTFLAGS: "-D warnings"
  RUST_VERSION: "1.70.0"
  PYTHON_VERSION: "3.11"

jobs:
  build:
    name: Build Backend Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [rust, python]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Rust Setup and Build
      - name: Setup Rust
        if: matrix.component == 'rust'
        uses: rust-lang/setup-rust-action@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy, rust-src
          profile: minimal

      - name: Rust Cache
        if: matrix.component == 'rust'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src/backend/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust
        if: matrix.component == 'rust'
        run: |
          cd src/backend
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo build --release --all-features

      # Python Setup and Build
      - name: Setup Python
        if: matrix.component == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        if: matrix.component == 'python'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.in-project true

      - name: Python Cache
        if: matrix.component == 'python'
        uses: actions/cache@v3
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Build Python
        if: matrix.component == 'python'
        run: |
          cd src/backend
          poetry install
          poetry run black --check .
          poetry run mypy .
          poetry run pytest --no-cov

  test:
    needs: build
    name: Test Backend Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [rust, python]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      # Rust Tests
      - name: Run Rust Tests
        if: matrix.component == 'rust'
        run: |
          cd src/backend
          cargo test --all-features --workspace
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Xml --workspace --all-features

      # Python Tests
      - name: Run Python Tests
        if: matrix.component == 'python'
        run: |
          cd src/backend
          poetry install
          poetry run pytest --cov=src --cov-report=xml

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: ${{ matrix.component }}

  security:
    needs: build
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Run Cargo Audit
        run: |
          cd src/backend
          cargo install cargo-audit
          cargo audit

      - name: Run Python Security Checks
        run: |
          cd src/backend
          poetry install
          poetry run safety check
          poetry run bandit -r src/

      - name: Run Snyk Scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  deploy-staging:
    needs: [test, security]
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        uses: docker/setup-buildx-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/trading-bot-backend:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/trading-bot-backend:staging

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster staging-cluster --service trading-bot-backend --force-new-deployment

  deploy-production:
    needs: deploy-staging
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Promote staging images to production
        run: |
          aws ecr batch-get-image --repository-name trading-bot-backend --image-ids imageTag=staging | \
          aws ecr batch-put-image --repository-name trading-bot-backend --image-tag production --image-ids imageTag=staging

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster production-cluster --service trading-bot-backend --force-new-deployment