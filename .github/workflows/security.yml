name: Security Scanning

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:  # Allow manual trigger

permissions:
  security-events: write
  actions: read
  contents: read
  packages: read

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python', 'rust']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Run Snyk to check Node.js dependencies
        uses: snyk/actions/node@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Snyk to check Rust dependencies
        uses: snyk/actions/rust@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run cargo-audit
        run: |
          cargo install cargo-audit
          cargo audit

  container-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build backend image
        run: docker build -t backend:latest ./src/backend

      - name: Build web image
        run: docker build -t web:latest ./src/web

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'backend:latest'
          format: 'sarif'
          output: 'trivy-results-backend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner - Web
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: 'web:latest'
          format: 'sarif'
          output: 'trivy-results-web.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-*.sarif'

  secret-scan:
    name: Secret and Credential Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@master
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog-actions-scan@master
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  security-report:
    name: Generate Security Report
    needs: [codeql-analysis, dependency-scan, container-scan, secret-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Generate consolidated report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## CodeQL Analysis" >> security-report.md
          cat */codeql-results.sarif >> security-report.md
          echo "## Dependency Scan" >> security-report.md
          cat */dependency-scan.json >> security-report.md
          echo "## Container Scan" >> security-report.md
          cat */trivy-results-*.sarif >> security-report.md
          echo "## Secret Scan" >> security-report.md
          cat */secret-scan.json >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: security-report.md
          retention-days: 90

      - name: Fail if critical vulnerabilities found
        if: ${{ failure() }}
        run: |
          echo "Critical security vulnerabilities found. Please review the security report."
          exit 1